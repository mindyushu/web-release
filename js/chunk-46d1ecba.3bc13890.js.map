{"version":3,"sources":["webpack:///./src/viewmodel/core/tools/mapfile/data/MindMapLocalData.js","webpack:///./src/viewmodel/core/tools/mapfile/LoadLocalXJMind.js","webpack:///./src/core/core/dataformat/fileImport/NewLocalMindParameter.js","webpack:///./src/viewmodel/core/tools/mapfile/MapSaveData.js","webpack:///./src/common/netWork/mind_map_api.js","webpack:///./src/viewmodel/core/tools/mapfile/MindContentJsonData.js","webpack:///./src/viewmodel/core/tools/mapfile/MindContentData.js","webpack:///./src/viewmodel/core/tools/mapfile/data/SheetData.js","webpack:///./src/viewmodel/facade/MindmapDataRouter.js","webpack:///./src/viewmodel/core/tools/mapfile/data/MindSheets.js","webpack:///./src/viewmodel/core/tools/mapfile/data/FilePathAndName.js"],"names":["MindMapLocalData","this","mid","id","rootId","sheetId","name","path","localPath","isSyncToCloud","arguments","length","syncToClouded","MindmapDataRouter","postGetMindmap","res","error","LoadLocalXJMind","appPath","mindMapLocalData","saveData","MapSaveData","resources","HashMap","parameter","NewLocalMindParameter","localpath","setPath","that","Promise","resolve","contentJSPath","MindMapZipConstant","FileSeparator","MindZIPContentPath","loadJson","then","data","json","JSON","parse","cell","setRootId","sheetIndex","undefined","index","element","JsPath","MindZIPContentFolderName","fileName","contentJs","isValid","content","mindType","styleIndex","mindDisplayType","isEmpty","nodeLayoutType","lineLayout","isElectron","getAppPath","MindZIPLocalFilesFolderName","MindZIPContentTemporaryFolderName","existsLocalFile","time","lastchangetime","mindKey","currentKey","Util","getCurrentTime","localStorage","key","indexOf","keyArr","split","getItem","getLocalPath","desc","getString","strings","Load_File_Error","count","mindSheets","MindSheets","totalNum","pageSize","Math","max","sheetData","SheetData","cover","type","sheets","push","jsonpath","xhr","XMLHttpRequest","open","HttpServerConfig","getLocalPathPrefix","responseType","onload","status","fr","FileReader","readAsText","response","addEventListener","e","target","result","onerror","send","url","fs","window","require","startsWith","md5","removeUrlPrefix","getUrlType","MindZIPFilesFolderName","existsSync","isAddPrefix","local","MindZIPNewPathe","getNameByUrl","value","format","isCloudStorage","isPrefix","isLoaclMind","getFileName","srcHttp","getMediaSrc","blob","getLocalFilePath","asyncLoadLocalFile","fetch","buffer","asyncLoadLocalFileByBuffer","arrayBuffer","request","oEvent","parentEntityId","stringify","val","mindParameter","keyValue","contentList","images","files","version","isSaveAs","MindContentJsonData","list","MindContentData","MindMe","isLogin","getUserId","getMachineId","lastsavetime","fileData","FilePathAndName","mapSaveData","jsonDataCell","postMindmapChecksum","req","onOk","onFail","eventually","headers","onProgress","apiRequest","postMindmapPull","postMindmapListDir","postMindmapListEntities","postMindmapGetEntity","postMindmapGetMindmap","postMindmapGetAi","postMindmapNew","postMindmapGetNumExceed","postMindmapNewByType","postMindmapCopy","postMindmapNewDir","postMindmapDelete","postMindmapQuery","postMindmapMove","postMindmapUploadDir","postMindmapAlias","postMindmapUploadMindmap","postMindmapUploadImage","postMindmapDeleteImage","postMindmapListDeleted","postMindmapSearchDeleted","postMindmapDeletedRestore","postMindmapDeleteCompletely","postMindmapCheckMindmap","postMindmapPlay","postMindmapUploadAttachment","postMindmapDeleteAttachments","postMindmapImportXjmind","postMindmapOcrScan","postMindmapOcrInfo","postMindmapShare","postMindmapModifyShare","postMindmapReshare","postMindmapDeleteShare","postMindmapCollectShare","postMindmapUncollectShare","postMindmapSaveShare","postMindmapAudioLimit","postMindmapUploadAudio","postMindmapDeleteAudio","postMindmapView","postMindmapViewConnectmap","postMindmapNewSheet","postMindmapDeleteSheet","postMindmapMoveSheet","postMindmapModifySheet","postMindmapCopySheet","postMindmapListSheets","postMindmapSearchSheet","postMindmapMigrateSheet","postMindmapExportSheet","postMindmapQueryArchives","postMindmapArchive","postMindmapUnarchive","postMindmapCopyArchive","postMindmapDeleteArchive","postMindmapMoveArchive","postMindmapModifyArchive","postMindmapRearrangeArchive","postMindmapNewArchiveDir","postMindmapSearchArchive","postMindmapListBackups","postMindmapViewBackup","postMindmapRestoreBackup","postMindmapDeleteBackup","postMindmapMyLatex","postMindmapUploadMyLatex","isMd5","getPath","loadMainContent","obj","archiveId","audio","audioSeconds","createTime","entityId","isArchived","machineId","modifyTime","parentId","sheetNum","userId","getRootId","getMindmapSheets","setParameter","nodeStr"],"mappings":"uKAAA,mBACA,a,uaAEMA,E,WACF,aAAc,UACVC,KAAKC,IAAM,GACXD,KAAKE,GAAK,GACVF,KAAKG,OAAS,GACdH,KAAKI,QAAU,GACfJ,KAAKK,KAAO,GACZL,KAAKM,KAAO,GACZN,KAAKO,UAAY,GACjBP,KAAKQ,eAAgB,E,wCAGzB,SAAeN,GACX,OAAwB,GAApBO,UAAUC,QAAqB,MAANR,GAAcA,GAAMF,KAAKG,OAC3B,MAAfH,KAAKG,QAAkBH,KAAKG,OAAOO,OAAS,IAAOV,KAAKQ,cAElD,MAANN,GAAcA,EAAGQ,OAAS,K,uBAI1C,SAAUR,GAA2B,WAAvBS,EAAuB,wDACjCX,KAAKG,OAASD,EACK,MAAfF,KAAKG,QAAkBH,KAAKG,OAAOO,OAAS,KAI5CC,EACAX,KAAKQ,eAAgB,EAErBI,UAAkBC,eACd,CAAEX,GAAIF,KAAKG,SACX,SAACW,GACG,EAAKN,eAAgB,KAEzB,SAACO,GACG,EAAKP,eAAgB,U,OAM1BT,E,sGC5Cf,mBACA,YACA,eACA,eACA,eACA,eACA,eACA,gBACA,eACA,e,muBAEMiB,E,WAEF,WAAYV,GAAM,UACdN,KAAKiB,QAAU,GACfjB,KAAKkB,iBAAmB,IAAInB,UAC5BC,KAAKmB,SAAW,IAAIC,UACpBpB,KAAKqB,UAAY,IAAIC,UACrBtB,KAAKuB,UAAY,IAAIC,U,+BAGzB,WACIxB,KAAKkB,iBAAmB,IAAInB,UAC5BC,KAAKmB,SAAW,IAAIC,UACpBpB,KAAKqB,UAAY,IAAIC,UACrBtB,KAAKuB,UAAY,IAAIC,Y,6BAGzB,SAAgBlB,EAAMmB,EAAWtB,EAAQC,GACrCJ,KAAK0B,QAAQpB,EAAMmB,GACnB,IAAIE,EAAO3B,KACX,OAAO,IAAI4B,QAAJ,4CAAY,WAAMC,GAAN,0FACE,MAAbJ,GAAyC,GAApBA,EAAUf,OADpB,uBAEXmB,EAAQ,MAFG,0BAKXC,EAAgBL,EAAYM,UAAmBC,cAAgBD,UAAmBE,mBACtFN,EAAKO,SAASJ,GAAeK,MAAK,SAACC,GAC/B,IAAIC,EAAOD,EACPjB,EAAWmB,KAAKC,MAAMF,GAG1B,GAFAV,EAAKT,iBAAiBhB,GAAKiB,EAASjB,GACpCyB,EAAKT,iBAAiBjB,IAAMkB,EAASlB,IAChB,MAAjBkB,EAASiB,MAAgBjB,EAASiB,KAAK1B,OAAS,EAAG,CACnD,IAAI8B,EAAOrB,EAASiB,KAAK,GACzBT,EAAKc,UAAUD,EAAKtC,IACpB,IAAIwC,EAAa,EACjB,QAAeC,GAAXvC,GAAmC,MAAXA,GAAmBA,EAAQM,OAAS,EAC5D,IAAK,IAAIkC,EAAQ,EAAGA,EAAQzB,EAASiB,KAAK1B,OAAQkC,IAAS,CACvD,IAAMC,EAAU1B,EAASiB,KAAKQ,GAC9B,GAAIC,EAAQ3C,IAAME,EAAS,CACvBoC,EAAOK,EACPH,EAAaE,EACb,OAKZ,IAAIE,EAASrB,EAAYM,UAAmBC,cAAgBD,UAAmBgB,yBAA2BhB,UAAmBC,cAAgBQ,EAAKQ,SAClJrB,EAAKO,SAASY,GAAQX,MAAK,SAACC,GAExB,IAAIa,EAAYb,EACZT,EAAKJ,UAAU2B,UACfrB,EAAQ,CAACsB,QAAQF,EACbG,SAASZ,EAAKY,SACdR,MAAMF,EACNW,WAAY1B,EAAKJ,UAAU8B,WAC3BC,gBAAiB3B,EAAKJ,UAAU+B,gBAChCC,QAAS5B,EAAKJ,UAAUgC,QACxBC,eAAe7B,EAAKJ,UAAUiC,eAC9BnD,KAAMmC,EAAKnC,KACXoD,WAAW9B,EAAKJ,UAAUkC,aAE9B5B,EAAQ,CAACsB,QAAQF,EACbG,SAASZ,EAAKY,SACdR,MAAMF,EACNW,WAAY,EACZC,gBAAiB,EACjBC,SAAS,EACTC,eAAe,EACfnD,KAAMmC,EAAKnC,KACXoD,WAAW,YAKvB5B,EAAQ,SAtDD,2CAAZ,yD,kCA4DX,SAAqB6B,EAAYvD,EAAQC,GACrC,IAAIuB,EAAO3B,KACX,OAAO,IAAI4B,QAAJ,4CAAY,WAAMC,GAAN,0GACX3B,EAAgB,MAAXE,GAAqC,GAAlBA,EAAQM,OAAcP,EAASC,EACjD,MAANF,GAA2B,GAAbA,EAAGQ,OAFN,qDAKXgD,EALW,oBAMPV,EAAW9C,EAAK,QAChBI,EAAOqB,EAAKgC,aAAe5B,UAAmB6B,4BAC1C7B,UAAmBC,cAAgBD,UAAmB8B,kCACtD9B,UAAmBC,cAAgBgB,EACtCrB,EAAKmC,gBAAgBxD,GAVf,uBAWPuB,EAAQ,MAXD,0BAcXF,EAAKO,SAAS5B,GAAM6B,MAAK,SAACC,GACtB,IAAIC,EAAOD,EACPjB,EAAWmB,KAAKC,MAAMF,GAC1BR,EAAQ,CAACsB,QAAQhC,EAASgC,QACtBC,SAASjC,EAASiC,SAClBR,MAAM,EACNS,WAAY,EACZC,gBAAiB,EACjBC,SAAS,EACTC,eAAe,EACfnD,KAAMc,EAASd,KACf0D,KAAM5C,EAAS6C,eACfP,WAAW,OA1BR,wBA6BPQ,EAAU,GACVC,EAAaC,UAAKC,iBAAmB,IAAMlE,EA9BpC,6BA+BImE,cA/BJ,kDA+BHC,EA/BG,aAgCHA,EAAI5D,QAAUwD,EAAWxD,QAAU4D,EAAIC,QAAQ,KAAO,GAhCnD,oBAiCCC,EAASF,EAAIG,MAAM,KACF,GAAjBD,EAAO9D,OAlCR,2DAqCC8D,EAAO,IAAMtE,EArCd,wBAsCC+D,EAAUK,EAtCX,wDA2CI,MAAXL,GAAqC,GAAlBA,EAAQvD,OA3CpB,wBA4CPmB,EAAQ,MA5CD,8BA+CPQ,EAAOgC,aAAaK,QAAQT,GACpB,MAAR5B,GAA+B,GAAfA,EAAK3B,OAhDd,wBAiDPmB,EAAQ,MAjDD,2BAoDPV,EAAWmB,KAAKC,MAAMF,GAC1BR,EAAQ,CAACsB,QAAQhC,EAASgC,QACtBC,SAASjC,EAASiC,SAClBR,MAAM,EACNS,WAAY,EACZC,gBAAiB,EACjBC,SAAS,EACTC,eAAe,EACfnD,KAAMc,EAASd,KACf0D,KAAM5C,EAAS6C,eACfP,WAAW,IA9DJ,4CAAZ,yD,8BAmEX,WAAmB,WACX9B,EAAO3B,KACX,OAAO,IAAI4B,QAAJ,4CAAY,WAAMC,GAAN,4FACXJ,EAAY,EAAKkD,eACJ,MAAblD,GAAyC,GAApBA,EAAUf,OAFpB,uBAGXmB,EAAQ,KAAM,CAAC+C,KAAMC,UAAUC,QAAQC,mBAH5B,0BAMXjD,EAAgBL,EAAYM,UAAmBC,cAAgBD,UAAmBE,mBACtFN,EAAKO,SAASJ,GAAeK,MAAK,SAACC,GAC/B,IAAIC,EAAOD,EACPjB,EAAWmB,KAAKC,MAAMF,GAC1B,GAAqB,MAAjBlB,EAASiB,MAAgBjB,EAASiB,KAAK1B,OAAS,EAAG,CACnD,IAAIsE,EAAQ7D,EAASiB,KAAK1B,OACtBuE,EAAa,IAAIC,UACrBD,EAAWE,SAAYH,EACvBC,EAAWG,SAAWC,KAAKC,IAAIN,EAAO,IAEtC,IADA,IAAI7E,EAASgB,EAASiB,KAAK,GAAGlC,GACrB0C,EAAQ,EAAGA,EAAQoC,EAAOpC,IAAS,CACxC,IAAMJ,EAAOrB,EAASiB,KAAKQ,GACvB2C,EAAY,IAAIC,UACpBD,EAAUlF,KAAOmC,EAAKnC,KACtBkF,EAAUrF,GAAKsC,EAAKtC,GACpBqF,EAAUpF,OAASA,EACnBoF,EAAUE,MAAQ,GAClBF,EAAU3C,MAAQA,EAClB2C,EAAUvC,SAAWR,EAAKQ,SAC1BuC,EAAUG,KAAOlD,EAAKY,SACK,MAAvBZ,EAAKwB,gBAAiD,GAAvBxB,EAAKwB,eACpCuB,EAAUvB,eAAiBG,UAAKC,iBAEhCmB,EAAUvB,eAAiBxB,EAAKwB,eAGpCiB,EAAWU,OAAOC,KAAKL,GAE3B1D,EAAQoD,QAERpD,EAAQ,KAAM,CAAC+C,KAAMC,UAAUC,QAAQC,sBApChC,2CAAZ,yD,sBA0CX,SAASc,GACL,IAAIlE,EAAO3B,KACX,OAAO,IAAI4B,QAAJ,4CAAY,WAAMC,GAAN,uFACf,IACUiE,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAOC,UAAiBC,mBAAmBL,EAAUlE,EAAKV,UAAU,GAC7E6E,EAAIK,aAAe,OACnBL,EAAIM,OAAS,WACT,GAAmB,MAAfN,EAAIO,OAAgB,CACpB,IAAIC,EAAK,IAAIC,WACbD,EAAGE,WAAWV,EAAIW,SAAU,SAC5BH,EAAGI,iBAAiB,WAAU,SAACC,GAC3B,IAAItE,EAAOsE,EAAEC,OAAOC,OACpBhF,EAAQQ,MACV,QAGFR,EAAQ,KAGhBiE,EAAIgB,QAAU,SAAC/F,GAEXc,EAAQ,KAEZiE,EAAIiB,OACN,MAAOhG,GAELc,EAAQ,IAzBG,2CAAZ,yD,0BA+BX,SAAamF,M,6BAIb,SAAgBA,GACZ,IAAIzG,EAAYP,KAAK2E,eAIjBsC,EAAKC,OAAOC,QAAQ,MACxB,GAAIH,EAAII,WAAW,SAAwB,MAAb7G,GAAqBA,EAAUG,OAAS,EAAG,CACrE,IAAIL,GAAO,IAAAgH,KAAIpB,UAAiBqB,gBAAgBN,IAC5CtB,EAAOvB,UAAKoD,WAAWP,GACvB1G,EAAON,KAAK2E,eAAiB5C,UAAmBC,cAAgBD,UAAmByF,uBAAyBzF,UAAmBC,cAAgB3B,EACvI,MAARqF,GAAgBA,EAAKhF,OAAS,IAC9BJ,EAAOA,EAAO,IAAMoF,GAExB,IAAIiB,EAAIM,EAAGQ,WAAWnH,GACtB,OAAOqG,EAEP,IAAIA,EAAIM,EAAGQ,WAAWT,GACtB,OAAOL,I,8BAKf,SAAiBK,GAAyB,IAApBU,IAAoB,yDACtC,GAAW,MAAPV,GAA6B,GAAdA,EAAItG,OACnB,MAAO,GAEX,IAAIH,EAAYP,KAAK2E,eACrB,GAAIqC,EAAII,WAAW,SAAwB,MAAb7G,GAAqBA,EAAUG,OAAS,EAAG,CACrE,IAAIL,GAAO,IAAAgH,KAAIpB,UAAiBqB,gBAAgBN,IAC5CtB,EAAOvB,UAAKoD,WAAWP,GACvB1G,EAAOC,EAAYwB,UAAmBC,cAAgBD,UAAmByF,uBAAyBzF,UAAmBC,cAAgB3B,EAC7H,MAARqF,GAAgBA,EAAKhF,OAAS,IAC9BJ,EAAOA,EAAO,IAAMoF,GAExB,IAAIuB,EAAKC,OAAOC,QAAQ,MACpBR,EAAIM,EAAGQ,WAAWnH,GACtB,GAAIqG,EACA,OAAIe,EACOzB,UAAiBC,mBAAmB5F,EAAMN,KAAKiB,SAE/CX,EAInB,OAAO0G,I,uBAGX,SAAU9G,GAA2B,IAAvBS,EAAuB,wDACjCX,KAAKkB,iBAAiBuB,UAAUvC,EAAIS,K,uBAGxC,WACI,OAAOX,KAAKkB,iBAAiBf,S,wBAGjC,SAAWD,GACPF,KAAKkB,iBAAiBd,QAAUF,I,wBAGpC,WACI,OAAOF,KAAKkB,iBAAiBd,U,qBAGjC,SAAQE,EAAMqH,GACN3H,KAAKkB,iBAAiBZ,MAAQA,IAGlCN,KAAKkB,iBAAiBZ,KAAOA,EAC7BN,KAAKkB,iBAAiBX,UAAYoH,EACtB,MAARrH,GAA+B,GAAfA,EAAKI,QACrBJ,EAAKiE,QAAQxC,UAAmB6F,kBAAoB,EACpD5H,KAAKkB,iBAAiBb,KAAO8D,UAAK0D,aAAaF,GAAO,GAEtD3H,KAAKkB,iBAAiBb,KAAO8D,UAAK0D,aAAavH,M,0BAIvD,SAAawH,GACI,MAATA,GAAiC,GAAhBA,EAAMpH,SAG3BV,KAAKuB,WAAY,IAAIC,WAAwBuG,OAAOD,M,qBAGxD,WACI,OAAO9H,KAAKkB,iBAAiBZ,O,qBAGjC,WACI,OAAON,KAAKkB,iBAAiBb,O,0BAGjC,WACI,OAAOL,KAAKkB,iBAAiBX,Y,wBAGjC,WACI,OAAOP,KAAKiB,U,yBAGhB,WACI,OAAqC,MAA9BjB,KAAKkB,iBAAiBZ,MAAgBN,KAAKkB,iBAAiBZ,KAAKI,OAAS,I,6BAGrF,WACI,OAAqC,MAA9BV,KAAKkB,iBAAiBZ,MAAgBN,KAAKkB,iBAAiBZ,KAAKiE,QAAQxC,UAAmB6F,kBAAoB,I,4BAG3H,SAAe1H,GACX,OAAOF,KAAKkB,iBAAiB8G,eAAe9H,K,yBAGhD,SAAY8G,GAAuB,IAAlBiB,EAAkB,wDAC3B5H,GAAO,IAAAgH,KAAIpB,UAAiBqB,gBAAgBN,IAChD,GAAIiB,EAAU,CACV,IAAIvC,EAAOvB,UAAKoD,WAAWP,GACf,MAARtB,GAAgBA,EAAKhF,OAAS,IAC9BL,EAAOA,EAAO,IAAMqF,GAG5B,OAAOrF,I,6BAGX,SAAgB2G,GACZ,IAAKhH,KAAKkI,cACN,MAAO,GAEX,IAAI7H,EAAOL,KAAKmI,YAAYnB,GAAK,GAE7B1G,GADO6D,UAAKoD,WAAWP,GAChBhH,KAAK2E,eAAiB5C,UAAmBC,cAAgBD,UAAmByF,uBAAyBzF,UAAmBC,cAAgB3B,GACnJ,OAAOC,I,kCAGX,WACI,IAAKN,KAAKkI,cACN,MAAO,GAEX,IAAI5H,EAAON,KAAK2E,eAAiB5C,UAAmBC,cAAgBD,UAAmByF,uBACvF,OAAOlH,I,8BAGX,SAAiB0G,GACb,IAAIrF,EAAO3B,KACX,OAAO,IAAI4B,QAAJ,4CAAY,WAAMC,GAAN,gGACXuG,EAAUnC,UAAiBoC,YAAYrB,GACvCsB,EAAO,MACP3G,EAAKmC,gBAAgBsE,GAHV,uBAIP9H,EAAOqB,EAAK4G,iBAAiBH,GAJtB,SAKEzG,EAAK6G,mBAAmBlI,GAL1B,OAKXgI,EALW,+CAOUG,MAAML,GAPhB,eAOP3B,EAPO,iBAQEA,EAAS6B,OARX,QAQXA,EARW,eAWXzG,EADQ,MAARyG,EACQ,KAEAA,GAbG,4CAAZ,yD,gCAkBX,SAAmBtB,GACf,IAAIrF,EAAO3B,KACX,OAAO,IAAI4B,QAAJ,4CAAY,WAAMC,GAAN,gGACXuG,EAAUnC,UAAiBoC,YAAYrB,GACvC0B,EAAS,MACT/G,EAAKmC,gBAAgBsE,GAHV,uBAIP9H,EAAOqB,EAAK4G,iBAAiBH,GAJtB,SAKIzG,EAAKgH,2BAA2BrI,GALpC,OAKXoI,EALW,+CAOUD,MAAML,GAPhB,eAOP3B,EAPO,iBAQIA,EAASmC,cARb,QAQXF,EARW,eAWX7G,EADU,MAAV6G,EACQ,KAEAA,GAbG,4CAAZ,yD,gCAmBX,SAAmBpI,GACf,OAAO,IAAIsB,SAAQ,SAAAC,GACf,IAAMgH,EAAU,IAAI9C,eACpB8C,EAAQ1C,aAAe,OACvB0C,EAAQ7C,KAAK,MAAO1F,GACpBuI,EAAQzC,OAAS,SAAU0C,GACD,KAAlBD,EAAQxC,OACRxE,EAAQgH,EAAQpC,UAEhB5E,EAAQ,OAGhBgH,EAAQ9B,Y,wCAIhB,SAA2BzG,GACvB,OAAO,IAAIsB,SAAQ,SAAAC,GACf,IAAMgH,EAAU,IAAI9C,eACpB8C,EAAQ1C,aAAe,cACvB0C,EAAQ7C,KAAK,MAAO1F,GACpBuI,EAAQzC,OAAS,SAAU0C,GACD,KAAlBD,EAAQxC,OACRxE,EAAQgH,EAAQpC,UAEhB5E,EAAQ,OAGhBgH,EAAQ9B,c,OAKL,IAAI/F,E,wdCvcbQ,E,WACF,aAAc,UACVxB,KAAK+I,eAAiB,GACtB/I,KAAK0F,KAAO,EACZ1F,KAAKsD,gBAAkB,EACvBtD,KAAKwD,eAAiB,EACtBxD,KAAKyD,WAAa,EAClBzD,KAAKuD,SAAU,EACfvD,KAAKqD,YAAc,E,iCAGvB,WACI,IAAIhB,EAAOC,KAAK0G,UAAUhJ,MAAM,SAAUsE,EAAK2E,GAC3C,MAAmB,oBAARA,EACAA,EAAM,GAEVA,KAEX,OAAO5G,I,oBAGX,SAAOA,GACH,IAAI6G,EAAgB,IAAI1H,EACpBY,EAAOE,KAAKC,MAAMF,GACtB,IAAK,IAAIiC,KAAOlC,EAAM,CAClB,IAAI+G,EAAW/G,EAAKkC,GACpB4E,EAAc5E,GAAO6E,EAEzB,OAAOD,I,qBAGX,WACI,OAA2B,GAApBlJ,KAAKqD,e,OAGL7B,E,oGCpCf,gBACA,eACA,eACA,eACA,eACA,e,uaAEMJ,E,WACF,aAAc,UACVpB,KAAKM,KAAO,GACZN,KAAKK,KAAO,GACZL,KAAKoJ,YAAc,GACnBpJ,KAAKqJ,OAAS,GACdrJ,KAAKsJ,MAAQ,GACbtJ,KAAKuJ,SAAW,EAChBvJ,KAAKE,GAAK,GACVF,KAAKC,IAAM,G,4CAGf,WAAqC,IAAlBuJ,EAAkB,wDACjC,GAAwB,MAApBxJ,KAAKoJ,aAAkD,GAA3BpJ,KAAKoJ,YAAY1I,OAC7C,MAAO,KAIX,IAFA,IAAI0B,EAAO,IAAIqH,UACXC,EAAO,GACF9G,EAAQ,EAAGA,EAAQ5C,KAAKoJ,YAAY1I,OAAQkC,IAAS,CAC1D,IAAMO,EAAUnD,KAAKoJ,YAAYxG,GAC7BJ,EAAO,IAAImH,UACfnH,EAAKW,QAAU,GAEXX,EAAKtC,GADLsJ,EACU,GAAK5G,EAELO,EAAQjD,GAGtBsC,EAAKnC,KAAO8C,EAAQ9C,KACpBmC,EAAKQ,SAAWG,EAAQH,SACxBR,EAAKY,SAAWD,EAAQC,SACxBsG,EAAK9D,KAAKpD,GAEdJ,EAAKmH,QAAUvJ,KAAKuJ,QAChBK,UAAOC,UACPzH,EAAKlC,GAAK0J,UAAOE,YAEjB1H,EAAKlC,GAAK,GAEdkC,EAAKnC,KAAM,IAAA8J,gBACX3H,EAAK4H,aAAe7F,UAAKC,iBACzBhC,EAAKA,KAAOsH,EACZ,IAAK,IAAI9G,EAAQ,EAAGA,EAAQ5C,KAAKsJ,MAAM5I,OAAQkC,IAAS,CACpD,IAAIJ,EAAOxC,KAAKsJ,MAAM1G,GAClBqH,EAAW,IAAIC,UACnBD,EAAS5J,KAAOmC,EAAKnC,KACrB4J,EAAS3J,KAAOkC,EAAKlC,KACrB8B,EAAKkH,MAAM1D,KAAKqE,GAEpB,IAAI5H,EAAOC,KAAK0G,UAAU5G,GAAM,SAAUkC,EAAK2E,GAC3C,MAAmB,oBAARA,EACAA,EAAM,GAEVA,KAEX,OAAO5G,I,oBAGX,SAAOA,GACH,IAAI8H,EAAc,IAAI/I,EAClBgB,EAAOE,KAAKC,MAAMF,GACtB,IAAK,IAAIiC,KAAOlC,EAAM,CAClB,IAAI+G,EAAW/G,EAAKkC,GACpB,GAAW,QAAPA,EAAe,CAEd,IADD,IAAIoF,EAAO,GACD9G,EAAQ,EAAGA,EAAQuG,EAASzI,OAAQkC,IAAS,CACnD,IAAIwH,EAAejB,EAASvG,GACxBJ,EAAO,IAAImH,UACfnH,EAAKW,QAAU,GACfX,EAAKtC,GAAKkK,EAAalK,GACvBsC,EAAKnC,KAAO+J,EAAa/J,KACzBmC,EAAKQ,SAAWoH,EAAapH,SAC7BR,EAAKY,SAAWgH,EAAahH,SAC7BsG,EAAK9D,KAAKpD,GAEb2H,EAAYf,YAAcM,OAE3BS,EAAY7F,GAAO6E,EAG3B,OAAOgB,M,OAGA/I,E,60DC1Ff,gBAGO,SAASiJ,EAAoBC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACnE,IAAAC,YAAW,OAAO,oBAAoBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGtE,SAASE,EAAgBP,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC/D,IAAAC,YAAW,OAAO,gBAAgBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGlE,SAASG,EAAmBR,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAClE,IAAAC,YAAW,OAAO,oBAAoBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGtE,SAASI,EAAwBT,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACvE,IAAAC,YAAW,OAAO,yBAAyBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG3E,SAASK,EAAqBV,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACpE,IAAAC,YAAW,OAAO,sBAAsBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGxE,SAASM,EAAsBX,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACrE,IAAAC,YAAW,OAAO,uBAAuBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGzE,SAASO,EAAiBZ,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAChE,IAAAC,YAAW,OAAO,uBAAuBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGzE,SAASQ,EAAeb,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC9D,IAAAC,YAAW,OAAO,eAAeN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGjE,SAASS,EAAwBd,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACvE,IAAAC,YAAW,OAAO,0BAA0BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG5E,SAASU,EAAqBf,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACpE,IAAAC,YAAW,OAAO,uBAAuBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGzE,SAASW,EAAgBhB,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC/D,IAAAC,YAAW,OAAO,gBAAgBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGlE,SAASY,EAAkBjB,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACjE,IAAAC,YAAW,OAAO,mBAAmBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGrE,SAASa,EAAkBlB,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACjE,IAAAC,YAAW,OAAO,kBAAkBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGpE,SAASc,EAAiBnB,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAChE,IAAAC,YAAW,OAAO,iBAAiBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGnE,SAASe,EAAgBpB,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC/D,IAAAC,YAAW,OAAO,gBAAgBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGlE,SAASgB,EAAqBrB,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACpE,IAAAC,YAAW,OAAO,sBAAsBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGxE,SAASiB,EAAiBtB,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAChE,IAAAC,YAAW,OAAO,iBAAiBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGnE,SAASkB,EAAyBvB,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACxE,IAAAC,YAAW,OAAO,0BAA0BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG5E,SAASmB,EAAuBxB,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASoB,EAAuBzB,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASqB,EAAuB1B,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASsB,EAAyB3B,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACxE,IAAAC,YAAW,OAAO,0BAA0BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG5E,SAASuB,EAA0B5B,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACzE,IAAAC,YAAW,OAAO,2BAA2BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG7E,SAASwB,EAA4B7B,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC3E,IAAAC,YAAW,OAAO,6BAA6BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG/E,SAASyB,EAAwB9B,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACvE,IAAAC,YAAW,OAAO,yBAAyBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG3E,SAAS0B,EAAgB/B,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC/D,IAAAC,YAAW,OAAO,gBAAgBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGlE,SAAS2B,EAA4BhC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC3E,IAAAC,YAAW,OAAO,6BAA6BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG/E,SAAS4B,EAA6BjC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC5E,IAAAC,YAAW,OAAO,8BAA8BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGhF,SAAS6B,EAAwBlC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACvE,IAAAC,YAAW,OAAO,yBAAyBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG3E,SAAS8B,EAAmBnC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAClE,IAAAC,YAAW,OAAO,oBAAoBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGtE,SAAS+B,EAAmBpC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAClE,IAAAC,YAAW,OAAO,oBAAoBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGtE,SAASgC,EAAiBrC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAChE,IAAAC,YAAW,OAAO,iBAAiBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGnE,SAASiC,EAAuBtC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASkC,EAAmBvC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAClE,IAAAC,YAAW,OAAO,mBAAmBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGrE,SAASmC,EAAuBxC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASoC,EAAwBzC,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACvE,IAAAC,YAAW,OAAO,yBAAyBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG3E,SAASqC,EAA0B1C,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACzE,IAAAC,YAAW,OAAO,2BAA2BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG7E,SAASsC,EAAqB3C,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACpE,IAAAC,YAAW,OAAO,sBAAsBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGxE,SAASuC,EAAsB5C,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACrE,IAAAC,YAAW,OAAO,uBAAuBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGzE,SAASwC,EAAuB7C,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASyC,EAAuB9C,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAAS0C,EAAgB/C,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC/D,IAAAC,YAAW,OAAO,gBAAgBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGlE,SAAS2C,EAA0BhD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACzE,IAAAC,YAAW,OAAO,2BAA2BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG7E,SAAS4C,EAAoBjD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACnE,IAAAC,YAAW,OAAO,qBAAqBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGvE,SAAS6C,EAAuBlD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAAS8C,EAAqBnD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACpE,IAAAC,YAAW,OAAO,sBAAsBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGxE,SAAS+C,EAAuBpD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASgD,EAAqBrD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACpE,IAAAC,YAAW,OAAO,sBAAsBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGxE,SAASiD,EAAsBtD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACrE,IAAAC,YAAW,OAAO,uBAAuBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGzE,SAASkD,EAAuBvD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASmD,GAAwBxD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACvE,IAAAC,YAAW,OAAO,yBAAyBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG3E,SAASoD,GAAuBzD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASqD,GAAyB1D,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACxE,IAAAC,YAAW,OAAO,0BAA0BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG5E,SAASsD,GAAmB3D,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAClE,IAAAC,YAAW,OAAO,mBAAmBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGrE,SAASuD,GAAqB5D,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACpE,IAAAC,YAAW,OAAO,qBAAqBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGvE,SAASwD,GAAuB7D,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASyD,GAAyB9D,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACxE,IAAAC,YAAW,OAAO,0BAA0BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG5E,SAAS0D,GAAuB/D,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAAS2D,GAAyBhE,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACxE,IAAAC,YAAW,OAAO,0BAA0BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG5E,SAAS4D,GAA4BjE,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC3E,IAAAC,YAAW,OAAO,6BAA6BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG/E,SAAS6D,GAAyBlE,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACxE,IAAAC,YAAW,OAAO,2BAA2BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG7E,SAAS8D,GAAyBnE,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACxE,IAAAC,YAAW,OAAO,0BAA0BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG5E,SAAS+D,GAAuBpE,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACtE,IAAAC,YAAW,OAAO,wBAAwBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG1E,SAASgE,GAAsBrE,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACrE,IAAAC,YAAW,OAAO,uBAAuBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGzE,SAASiE,GAAyBtE,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACxE,IAAAC,YAAW,OAAO,0BAA0BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG5E,SAASkE,GAAwBvE,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACvE,IAAAC,YAAW,OAAO,yBAAyBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAG3E,SAASmE,GAAmBxE,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAClE,IAAAC,YAAW,OAAO,oBAAoBN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,GAGtE,SAASoE,GAAyBzE,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IACxE,IAAAC,YAAW,OAAO,2BAA2BN,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,K,2cChR9ElB,E,GACF,aAAc,UACVzJ,KAAKuJ,QAAU,EACfvJ,KAAKoC,KAAO,GACZpC,KAAKsJ,MAAQ,GACbtJ,KAAKE,GAAK,GACVF,KAAKC,IAAM,GACXD,KAAKgK,cAAgB,K,EAGdP,E,sGCVf,gBACA,a,uaAEME,E,WACF,aAAc,UACV3J,KAAKK,KAAO,GACZL,KAAKgD,SAAW,GAChBhD,KAAKE,GAAK,GACVF,KAAKoD,SAAW,EAChBpD,KAAKmD,QAAU,KACfnD,KAAKgE,gBAAkB,E,qCAG3B,SAAYhB,GAAwB,IAAdgM,IAAc,yDAE5BhP,KAAKgD,SADLgM,GACgB,IAAA3H,KAAIrE,GAAY,QAEhBA,I,qBAIxB,SAAQ3C,GACJL,KAAKK,KAAOA,I,4BAGhB,WACI,IAAIgC,EAAOC,KAAK0G,UAAUhJ,MAAM,SAAUsE,EAAK2E,GAC3C,MAAmB,oBAARA,EACAA,EAAM,GAEVA,KAEX,OAAO5G,M,OAGAsH,E,ydC5BTnE,E,GACF,aAAc,UACVxF,KAAKK,KAAO,GACZL,KAAKyF,MAAQ,GACbzF,KAAKE,GAAK,GACVF,KAAKG,OAAS,GACdH,KAAK4C,MAAQ,EACb5C,KAAKgE,eAAiB,EACtBhE,KAAKgD,SAAW,GAChBhD,KAAK0F,KAAO,K,EAGLF,E,sGCnBf,gBACA,e,uaAEM5E,E,WACF,aAAc,UACVZ,KAAK0D,YAAa,E,wCAGtB,SAAe4G,EAAKC,EAAMC,EAAQC,EAAYC,EAASC,IAC9C3J,UAAgBgH,kBAAgC,MAAZsC,EAAIhK,MAAgBgK,EAAIhK,MAAQN,KAAKiP,WAAoC,MAAvBjP,KAAK2E,gBAA0B3E,KAAK2E,eAAejE,OAAS,EACnJM,UAAgBkO,gBAAgB5E,EAAIhK,KAAMN,KAAK2E,eAAgB2F,EAAIpK,GAAIoK,EAAIlK,SAAS+B,MAAK,SAACC,GACtF,GAAY,MAARA,EAAc,CACd,IAAI+M,EAAM,CAACC,UAAW,GACtBC,MAAO,GACPC,aAAc,EACdnM,QAASf,EAAKe,QACdsC,MAAO,GACP8J,WAAY,EACZC,SAAU,GACVtP,GAAI,GACJ0C,MAAOR,EAAKQ,MACZ6M,YAAY,EACZlM,SAAS,EACTE,WAAYrB,EAAKqB,WACjBiM,UAAW,GACXpM,gBAAiBlB,EAAKkB,gBACtBqM,WAAY,GACZtP,KAAM+B,EAAK/B,KACXmD,eAAgBpB,EAAKoB,eACrBoM,SAAU,GACVxP,QAAS,GACTyP,SAAU,GACVxM,WAAYjB,EAAKiB,WACjBqC,KAAMtD,EAAKgB,SACX0M,OAAQ,IACRvF,EAAK4E,QAEL3E,EAAO,CAAC5F,KAAK,eAIrB,IAAAqG,uBAAsBX,EAAKC,EAAMC,EAAQC,EAAYC,EAASC,K,+BAItE,SAAkBL,EAAKC,EAAMC,EAAQC,EAAYC,EAASC,IACtD,IAAAkB,0BAAyBvB,EAAKC,EAAMC,EAAQC,EAAYC,EAASC,K,+BAGrE,SAAkBL,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,IAC5C3J,UAAgBgH,kBACM,MAAvBhI,KAAK2E,gBAA0B3E,KAAK2E,eAAejE,OAAS,IAC7C,MAAd4J,EAAInK,QAAkBmK,EAAInK,QAAUa,UAAgB+O,aACrD/O,UAAgBgP,mBAAmB7N,MAAK,SAACC,EAAMrB,GAC/B,MAARqB,EACAmI,EAAKnI,GACW,MAATrB,GACPyJ,EAAOzJ,OAIf,IAAA6M,uBAAsBtD,EAAIC,EAAKC,EAAOC,EAAWC,EAAQC,K,qBAIjE,SAAQrK,EAAMqH,GACV3G,UAAgBU,QAAQpB,EAAMqH,K,0BAGlC,SAAaG,GACT9G,UAAgBiP,aAAanI,K,qBAGjC,WACI,OAAO9G,UAAgBiO,Y,0BAG3B,WACI,OAAOjO,UAAgB2D,mB,OAIhB,IAAI/D,E,sdC9EbsE,E,WACF,aAAc,UACVlF,KAAKmF,SAAW,EAChBnF,KAAKoF,SAAW,GAChBpF,KAAK2F,OAAS,G,sCAGlB,WACI,IAAIuK,EAAU5N,KAAK0G,UAAUhJ,MAAM,SAAUsE,EAAK2E,GAC9C,MAAmB,oBAARA,EACAA,EAAM,GAEVA,KAEX,OAAOiH,M,OAGAhL,E,sdCrBTgF,E,GACF,aAAc,UACVlK,KAAKK,KAAO,GACZL,KAAKM,KAAO,M,EAGL4J,E","file":"js/chunk-46d1ecba.3bc13890.js","sourcesContent":["import MindmapDataRouter from \"../../../../facade/MindmapDataRouter\";\r\nimport MindMe from \"../../../../facade/MindMe\";\r\n\r\nclass MindMapLocalData {\r\n    constructor() {\r\n        this.mid = \"\"; //设备id\r\n        this.id = \"\"; //用户id\r\n        this.rootId = \"\";\r\n        this.sheetId = \"\";\r\n        this.name = \"\";\r\n        this.path = \"\";\r\n        this.localPath = \"\";\r\n        this.isSyncToCloud = false;\r\n    }\r\n\r\n    isCloudStorage(id) {\r\n        if (arguments.length == 0 || id == null || id == this.rootId) {\r\n            return (this.rootId != null && this.rootId.length > 10) && this.isSyncToCloud;\r\n        } else {\r\n            return (id != null && id.length > 10);\r\n        }\r\n    }\r\n\r\n    setRootId(id, syncToClouded = false) {\r\n        this.rootId = id\r\n        if (this.rootId == null || this.rootId.length < 10) {\r\n            return\r\n        }\r\n        \r\n        if (syncToClouded) {\r\n            this.isSyncToCloud = true\r\n        } else {\r\n            MindmapDataRouter.postGetMindmap(\r\n                { id: this.rootId},\r\n                (res) => {\r\n                    this.isSyncToCloud = true\r\n                },\r\n                (error) => {\r\n                    this.isSyncToCloud = false\r\n                }\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default MindMapLocalData","import HttpServerConfig from \"../../../../common/HttpServerConfig\";\r\nimport { md5 } from \"../../../../common/netWork/base\";\r\nimport NewLocalMindParameter from \"../../../../core/core/dataformat/fileImport/NewLocalMindParameter\";\r\nimport Util from \"../../../../utils/Util\";\r\nimport HashMap from \"../../base/HashMap\";\r\nimport MindMapLocalData from \"./data/MindMapLocalData\";\r\nimport MindSheets from \"./data/MindSheets\";\r\nimport SheetData from \"./data/SheetData\";\r\nimport MapSaveData from \"./MapSaveData\";\r\nimport MindMapZipConstant from \"./MindMapZipConstant\";\r\n\r\nclass LoadLocalXJMind {\r\n\r\n    constructor(path) {\r\n        this.appPath = \"\"\r\n        this.mindMapLocalData = new MindMapLocalData()\r\n        this.saveData = new MapSaveData()\r\n        this.resources = new HashMap()\r\n        this.parameter = new NewLocalMindParameter()\r\n    }\r\n\r\n    reset() {\r\n        this.mindMapLocalData = new MindMapLocalData()\r\n        this.saveData = new MapSaveData()\r\n        this.resources = new HashMap()\r\n        this.parameter = new NewLocalMindParameter()\r\n    }\r\n\r\n    loadMainContent(path, localpath, rootId, sheetId) {\r\n        this.setPath(path, localpath)\r\n        let that = this;\r\n        return new Promise(async resolve => {\r\n            if (localpath == null || localpath.length == 0) {\r\n                resolve(null)\r\n                return\r\n            }\r\n            let contentJSPath = localpath + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPContentPath\r\n            that.loadJson(contentJSPath).then((data) => {\r\n                let json = data;\r\n                let saveData = JSON.parse(json)\r\n                that.mindMapLocalData.id = saveData.id\r\n                that.mindMapLocalData.mid = saveData.mid\r\n                if (saveData.data != null && saveData.data.length > 0) {\r\n                    let cell = saveData.data[0]\r\n                    that.setRootId(cell.id)\r\n                    let sheetIndex = 0;\r\n                    if (sheetId != undefined && sheetId != null && sheetId.length > 0) {\r\n                        for (let index = 0; index < saveData.data.length; index++) {\r\n                            const element = saveData.data[index];\r\n                            if (element.id == sheetId) {\r\n                                cell = element;\r\n                                sheetIndex = index;\r\n                                break \r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    let JsPath = localpath + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPContentFolderName + MindMapZipConstant.FileSeparator + cell.fileName\r\n                    that.loadJson(JsPath).then((data) => {\r\n                        \r\n                        let contentJs = data;\r\n                        if (that.parameter.isValid()) {\r\n                            resolve({content:contentJs, \r\n                                mindType:cell.mindType, \r\n                                index:sheetIndex,\r\n                                styleIndex: that.parameter.styleIndex,\r\n                                mindDisplayType: that.parameter.mindDisplayType,\r\n                                isEmpty: that.parameter.isEmpty,\r\n                                nodeLayoutType:that.parameter.nodeLayoutType,\r\n                                name: cell.name,\r\n                                lineLayout:that.parameter.lineLayout})\r\n                        } else {\r\n                            resolve({content:contentJs, \r\n                                mindType:cell.mindType, \r\n                                index:sheetIndex,\r\n                                styleIndex: 1,\r\n                                mindDisplayType: 1,\r\n                                isEmpty: false,\r\n                                nodeLayoutType:1,\r\n                                name: cell.name,\r\n                                lineLayout:1})\r\n                        }\r\n                        \r\n                    });                    \r\n                } else {\r\n                    resolve(null)\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    loadChechMindContent(isElectron, rootId, sheetId) {\r\n        let that = this;\r\n        return new Promise(async resolve => {\r\n            let id = sheetId == null || sheetId.length == 0 ? rootId : sheetId\r\n            if (id == null || id.length == 0) {               \r\n                return\r\n            }\r\n            if (isElectron) {\r\n                let fileName = id + \".json\"\r\n                let path = that.getAppPath() + MindMapZipConstant.MindZIPLocalFilesFolderName + \r\n                        MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPContentTemporaryFolderName +\r\n                        MindMapZipConstant.FileSeparator + fileName\r\n                if (!that.existsLocalFile(path)) {\r\n                    resolve(null)\r\n                    return\r\n                }       \r\n                that.loadJson(path).then((data) => {\r\n                    let json = data;\r\n                    let saveData = JSON.parse(json)\r\n                    resolve({content:saveData.content, \r\n                        mindType:saveData.mindType, \r\n                        index:0,\r\n                        styleIndex: 1,\r\n                        mindDisplayType: 1,\r\n                        isEmpty: false,\r\n                        nodeLayoutType:1,\r\n                        name: saveData.name,\r\n                        time: saveData.lastchangetime,\r\n                        lineLayout:1})\r\n                })\r\n            } else {\r\n                let mindKey = \"\"\r\n                let currentKey = Util.getCurrentTime() + \"|\" + id\r\n                for(let key in localStorage) {\r\n                    if (key.length == currentKey.length && key.indexOf(\"|\") > 0) {\r\n                        let keyArr = key.split(\"|\")\r\n                        if (keyArr.length != 2) {\r\n                            continue\r\n                        }\r\n                        if (keyArr[1] == id) {\r\n                            mindKey = key\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n                if (mindKey == null || mindKey.length == 0) {\r\n                    resolve(null)\r\n                    return\r\n                }\r\n                let json = localStorage.getItem(mindKey);\r\n                if (json == null || json.length == 0) {\r\n                    resolve(null)\r\n                    return\r\n                }\r\n                let saveData = JSON.parse(json)\r\n                resolve({content:saveData.content, \r\n                    mindType:saveData.mindType, \r\n                    index:0,\r\n                    styleIndex: 1,\r\n                    mindDisplayType: 1,\r\n                    isEmpty: false,\r\n                    nodeLayoutType:1,\r\n                    name: saveData.name,\r\n                    time: saveData.lastchangetime,\r\n                    lineLayout:1})\r\n            }\r\n        });\r\n    }\r\n\r\n    getMindmapSheets() {\r\n        let that = this;\r\n        return new Promise(async resolve => {\r\n            let localpath = this.getLocalPath()\r\n            if (localpath == null || localpath.length == 0) {\r\n                resolve(null, {desc: getString(strings.Load_File_Error)})\r\n                return\r\n            }\r\n            let contentJSPath = localpath + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPContentPath\r\n            that.loadJson(contentJSPath).then((data) => {\r\n                let json = data;\r\n                let saveData = JSON.parse(json)\r\n                if (saveData.data != null && saveData.data.length > 0) {\r\n                    let count = saveData.data.length;\r\n                    let mindSheets = new MindSheets()\r\n                    mindSheets.totalNum =  count\r\n                    mindSheets.pageSize = Math.max(count, 50);\r\n                    let rootId = saveData.data[0].id\r\n                    for (let index = 0; index < count; index++) {\r\n                        const cell = saveData.data[index];\r\n                        let sheetData = new SheetData()\r\n                        sheetData.name = cell.name\r\n                        sheetData.id = cell.id\r\n                        sheetData.rootId = rootId\r\n                        sheetData.cover = \"\";\r\n                        sheetData.index = index;\r\n                        sheetData.fileName = cell.fileName;\r\n                        sheetData.type = cell.mindType;\r\n                        if (cell.lastchangetime == null || cell.lastchangetime == 0) {\r\n                            sheetData.lastchangetime = Util.getCurrentTime()\r\n                        } else {\r\n                            sheetData.lastchangetime = cell.lastchangetime;\r\n                        }\r\n                        \r\n                        mindSheets.sheets.push(sheetData)\r\n                    }\r\n                    resolve(mindSheets)\r\n                } else {\r\n                    resolve(null, {desc: getString(strings.Load_File_Error)})\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    loadJson(jsonpath) {\r\n        let that = this\r\n        return new Promise(async resolve => {\r\n            try {\r\n                const xhr = new XMLHttpRequest();\r\n                xhr.open('GET', HttpServerConfig.getLocalPathPrefix(jsonpath, that.appPath), true);\r\n                xhr.responseType = 'blob';\r\n                xhr.onload = () => {\r\n                    if (xhr.status === 200) {\r\n                        var fr = new FileReader();\r\n                        fr.readAsText(xhr.response, \"utf-8\");\r\n                        fr.addEventListener(\"loadend\",(e) => {\r\n                            var json = e.target.result;\r\n                            resolve(json)\r\n                        },false);\r\n                    } else {\r\n                        console.log(\"xhr.response xhr.status - \", xhr.status);\r\n                        resolve(\"\")\r\n                    }\r\n                };\r\n                xhr.onerror = (error) => {\r\n                    console.log(\"xhr.response error - \", error);\r\n                    resolve(\"\")\r\n                };\r\n                xhr.send();\r\n            } catch (error) {\r\n                console.log(\"loadJson error: \", error);\r\n                resolve(\"\")\r\n            }\r\n            \r\n        });\r\n    }\r\n\r\n    loadLocalImg(url) {\r\n\r\n    }\r\n\r\n    existsLocalFile(url) {\r\n        let localPath = this.getLocalPath()\r\n        // if (localPath == null || localPath.length == 0) {\r\n        //     return false;\r\n        // }\r\n        var fs = window.require('fs');\r\n        if (url.startsWith(\"http\") && localPath != null && localPath.length > 0) {\r\n            let name = md5(HttpServerConfig.removeUrlPrefix(url))\r\n            let type = Util.getUrlType(url)\r\n            var path = this.getLocalPath() + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPFilesFolderName + MindMapZipConstant.FileSeparator + name\r\n            if (type != null && type.length > 0) {\r\n                path = path + \".\" + type;\r\n            }\r\n            let e = fs.existsSync(path)\r\n            return e\r\n        } else {\r\n            let e = fs.existsSync(url)\r\n            return e\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    getLocalFilePath(url, isAddPrefix = true) {\r\n        if (url == null && url.length == 0) {\r\n            return \"\"\r\n        }\r\n        let localPath = this.getLocalPath()\r\n        if (url.startsWith(\"http\") && localPath != null && localPath.length > 0) {\r\n            let name = md5(HttpServerConfig.removeUrlPrefix(url))\r\n            let type = Util.getUrlType(url)\r\n            var path = localPath + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPFilesFolderName + MindMapZipConstant.FileSeparator + name\r\n            if (type != null && type.length > 0) {\r\n                path = path + \".\" + type;\r\n            }\r\n            var fs = window.require('fs');\r\n            let e = fs.existsSync(path)\r\n            if (e) {\r\n                if (isAddPrefix) {\r\n                    return HttpServerConfig.getLocalPathPrefix(path, this.appPath)\r\n                } else {\r\n                    return path\r\n                }\r\n            }\r\n        }\r\n        return url;\r\n    } \r\n\r\n    setRootId(id, syncToClouded = false) {\r\n        this.mindMapLocalData.setRootId(id, syncToClouded)\r\n    }\r\n\r\n    getRootId() {\r\n        return this.mindMapLocalData.rootId\r\n    }\r\n\r\n    setSheetId(id) {\r\n        this.mindMapLocalData.sheetId = id\r\n    }\r\n\r\n    getSheetId() {\r\n        return this.mindMapLocalData.sheetId\r\n    }\r\n\r\n    setPath(path, local) {\r\n        if (this.mindMapLocalData.path == path) {\r\n            return;\r\n        }\r\n        this.mindMapLocalData.path = path\r\n        this.mindMapLocalData.localPath = local\r\n        if (path == null || path.length == 0 ||\r\n            path.indexOf(MindMapZipConstant.MindZIPNewPathe) > -1) {\r\n            this.mindMapLocalData.name = Util.getNameByUrl(local, false)\r\n        } else {\r\n            this.mindMapLocalData.name = Util.getNameByUrl(path)\r\n        }\r\n    }\r\n\r\n    setParameter(value) {\r\n        if (value == null || value.length == 0) {\r\n            return;\r\n        }\r\n        this.parameter = new NewLocalMindParameter().format(value)\r\n    }\r\n\r\n    getPath() {\r\n        return this.mindMapLocalData.path;\r\n    }\r\n\r\n    getName() {\r\n        return this.mindMapLocalData.name;\r\n    }\r\n\r\n    getLocalPath() {\r\n        return this.mindMapLocalData.localPath;\r\n    }\r\n\r\n    getAppPath() {\r\n        return this.appPath;\r\n    }\r\n\r\n    isLoaclMind() {\r\n        return this.mindMapLocalData.path != null && this.mindMapLocalData.path.length > 0\r\n    }\r\n\r\n    isLoaclNotSaved() {\r\n        return this.mindMapLocalData.path != null && this.mindMapLocalData.path.indexOf(MindMapZipConstant.MindZIPNewPathe) > -1;\r\n    }\r\n\r\n    isCloudStorage(id) {\r\n        return this.mindMapLocalData.isCloudStorage(id); \r\n    }\r\n\r\n    getFileName(url, isPrefix = false) {\r\n        let name = md5(HttpServerConfig.removeUrlPrefix(url))\r\n        if (isPrefix) {\r\n            let type = Util.getUrlType(url)\r\n            if (type != null && type.length > 0) {\r\n                name = name + \".\" + type;\r\n            }\r\n        }\r\n        return name;\r\n    }\r\n\r\n    getUrlLocalPath(url) {\r\n        if (!this.isLoaclMind()) {\r\n            return \"\";\r\n        }\r\n        let name = this.getFileName(url, true)\r\n        let type = Util.getUrlType(url)\r\n        var path = this.getLocalPath() + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPFilesFolderName + MindMapZipConstant.FileSeparator + name\r\n        return path;\r\n    }\r\n\r\n    getLocalFileRootPath() {\r\n        if (!this.isLoaclMind()) {\r\n            return \"\";\r\n        }\r\n        var path = this.getLocalPath() + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPFilesFolderName\r\n        return path;\r\n    }\r\n\r\n    loadResourceData(url) {\r\n        var that = this\r\n        return new Promise(async resolve => {\r\n            let srcHttp = HttpServerConfig.getMediaSrc(url)\r\n            let blob = null;\r\n            if (that.existsLocalFile(srcHttp)) {\r\n                let path = that.getLocalFilePath(srcHttp);\r\n                blob = await that.asyncLoadLocalFile(path)\r\n            } else {\r\n                let response = await fetch(srcHttp); \r\n                blob = await response.blob();                    \r\n            }\r\n            if (blob == null) {\r\n                resolve(null)\r\n            } else {\r\n                resolve(blob)\r\n            }\r\n        });\r\n    }\r\n\r\n    loadResourceBuffer(url) {\r\n        var that = this\r\n        return new Promise(async resolve => {\r\n            let srcHttp = HttpServerConfig.getMediaSrc(url)\r\n            let buffer = null;\r\n            if (that.existsLocalFile(srcHttp)) {\r\n                let path = that.getLocalFilePath(srcHttp);\r\n                buffer = await that.asyncLoadLocalFileByBuffer(path)\r\n            } else {\r\n                let response = await fetch(srcHttp); \r\n                buffer = await response.arrayBuffer();                    \r\n            }\r\n            if (buffer == null) {\r\n                resolve(null)\r\n            } else {\r\n                resolve(buffer)\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    asyncLoadLocalFile(path) {\r\n        return new Promise(resolve => {\r\n            const request = new XMLHttpRequest();            \r\n            request.responseType = \"blob\";\r\n            request.open(\"GET\", path);\r\n            request.onload = function (oEvent) {\r\n                if (request.status == 200) {\r\n                    resolve(request.response)\r\n                } else {\r\n                    resolve(null)\r\n                }\r\n            }\r\n            request.send()\r\n        })\r\n    }\r\n\r\n    asyncLoadLocalFileByBuffer(path) {\r\n        return new Promise(resolve => {\r\n            const request = new XMLHttpRequest();            \r\n            request.responseType = \"arraybuffer\";\r\n            request.open(\"GET\", path);\r\n            request.onload = function (oEvent) {\r\n                if (request.status == 200) {\r\n                    resolve(request.response)\r\n                } else {\r\n                    resolve(null)\r\n                }\r\n            }\r\n            request.send()\r\n        })\r\n    }\r\n}\r\n\r\nexport default new LoadLocalXJMind()\r\n\r\n\r\n","\r\nclass NewLocalMindParameter {\r\n    constructor() {\r\n        this.parentEntityId = \"\";\r\n        this.type = 1\r\n        this.mindDisplayType = 0\r\n        this.nodeLayoutType = 1\r\n        this.lineLayout = 1\r\n        this.isEmpty = false\r\n        this.styleIndex = -1\r\n    }\r\n\r\n    getJson() {\r\n        let json = JSON.stringify(this, function (key, val) {\r\n            if (typeof val === \"function\") {\r\n                return val + '';\r\n            }\r\n            return val\r\n        });\r\n        return json;\r\n    }\r\n\r\n    format(json) {\r\n        let mindParameter = new NewLocalMindParameter()\r\n        let data = JSON.parse(json)\r\n        for (var key in data) {\r\n            let keyValue = data[key]\r\n            mindParameter[key] = keyValue\r\n        }\r\n        return mindParameter\r\n    }\r\n\r\n    isValid() {\r\n        return this.styleIndex != -1;\r\n    }\r\n}\r\nexport default NewLocalMindParameter","import { getMachineId } from \"../../../../common/netWork/base\";\r\nimport Util from \"../../../../utils/Util\";\r\nimport MindMe from \"../../../facade/MindMe\";\r\nimport FilePathAndName from \"./data/FilePathAndName\";\r\nimport MindContentData from \"./MindContentData\";\r\nimport MindContentJsonData from \"./MindContentJsonData\";\r\n\r\nclass MapSaveData {\r\n    constructor() {\r\n        this.path = \"\";//存储路径\r\n        this.name = \"\";\r\n        this.contentList = [];\r\n        this.images = []; //cell ImageFileData\r\n        this.files = []; //cell FileData\r\n        this.version = -1.0\r\n        this.id = \"\";\r\n        this.mid = \"\";\r\n    }\r\n\r\n    getContentListJson(isSaveAs = false) {\r\n        if (this.contentList == null || this.contentList.length == 0) {\r\n            return \"{}\";\r\n        }\r\n        let data = new MindContentJsonData()\r\n        let list = [];\r\n        for (let index = 0; index < this.contentList.length; index++) {\r\n            const content = this.contentList[index];\r\n            let cell = new MindContentData();\r\n            cell.content = \"\";\r\n            if (isSaveAs) {\r\n                cell.id = \"\" + index;\r\n            } else {\r\n                cell.id = content.id;\r\n            }\r\n            \r\n            cell.name = content.name;\r\n            cell.fileName = content.fileName\r\n            cell.mindType = content.mindType\r\n            list.push(cell);\r\n        }\r\n        data.version = this.version;\r\n        if (MindMe.isLogin()) {\r\n            data.id = MindMe.getUserId()\r\n        } else {\r\n            data.id = \"\";\r\n        }\r\n        data.mid = getMachineId()\r\n        data.lastsavetime = Util.getCurrentTime()\r\n        data.data = list;\r\n        for (let index = 0; index < this.files.length; index++) {\r\n            let cell = this.files[index]\r\n            let fileData = new FilePathAndName()\r\n            fileData.name = cell.name;\r\n            fileData.path = cell.path;\r\n            data.files.push(fileData)\r\n        }\r\n        let json = JSON.stringify(data, function (key, val) {\r\n            if (typeof val === \"function\") {\r\n                return val + '';\r\n            }\r\n            return val\r\n        });\r\n        return json;\r\n    }\r\n\r\n    format(json) {\r\n        let mapSaveData = new MapSaveData()\r\n        let data = JSON.parse(json)\r\n        for (var key in data) {\r\n            let keyValue = data[key]\r\n            if (key == \"data\") {\r\n                var list = []\r\n                 for (let index = 0; index < keyValue.length; index++) {\r\n                    let jsonDataCell = keyValue[index]\r\n                    let cell = new MindContentData();\r\n                    cell.content = \"\";\r\n                    cell.id = jsonDataCell.id;\r\n                    cell.name = jsonDataCell.name;\r\n                    cell.fileName = jsonDataCell.fileName\r\n                    cell.mindType = jsonDataCell.mindType\r\n                    list.push(cell);\r\n                 }\r\n                 mapSaveData.contentList = list\r\n            } else {\r\n                mapSaveData[key] = keyValue\r\n            }\r\n        }\r\n        return mapSaveData\r\n    }\r\n}\r\nexport default MapSaveData","import {apiRequest} from './base'\r\n\r\n//上次更新的导图列表checksum\r\nexport function postMindmapChecksum(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/checksum',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//拉取所有云端文件信息\r\nexport function postMindmapPull(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/pull',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//列出文件夹下所有文件\r\nexport function postMindmapListDir(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/list-dir',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//列出最近编辑的导图列表\r\nexport function postMindmapListEntities(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/list-entities',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//获取文件夹信息\r\nexport function postMindmapGetEntity(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/get-entity',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//获取导图内容\r\nexport function postMindmapGetMindmap(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/get-mindmap',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//获取AI内容\r\nexport function postMindmapGetAi(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/ask-chatgpt',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//新建导图\r\nexport function postMindmapNew(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/new',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//新建导图是否提示导图数量超出限制\r\nexport function postMindmapGetNumExceed(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/get-num-exceed',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//按类型新建导图\r\nexport function postMindmapNewByType(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/new-by-type',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//复制导图\r\nexport function postMindmapCopy(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/copy',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//新建目录\r\nexport function postMindmapNewDir(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/new-dir',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//删除文件\r\nexport function postMindmapDelete(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/delete',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//搜索导图\r\nexport function postMindmapQuery(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/query',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//移动导图或文件夹\r\nexport function postMindmapMove(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/move',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//修改文件夹\r\nexport function postMindmapUploadDir(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/upload-dir',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//重命名\r\nexport function postMindmapAlias(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/alias',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//上传导图\r\nexport function postMindmapUploadMindmap(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/upload-mindmap',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//上传图片\r\nexport function postMindmapUploadImage(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/upload-image',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//删除图片\r\nexport function postMindmapDeleteImage(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/delete-image',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//获取最近删除的导图列表\r\nexport function postMindmapListDeleted(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/list-deleted',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//搜索最近删除的导图\r\nexport function postMindmapSearchDeleted(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/search-deleted',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//恢复已删除的导图\r\nexport function postMindmapDeletedRestore(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/deleted-restore',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//彻底删除某个导图\r\nexport function postMindmapDeleteCompletely(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/delete-completely',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//获取导图基本信息\r\nexport function postMindmapCheckMindmap(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/check-mindmap',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//播放导图\r\nexport function postMindmapPlay(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/play',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//上传附件\r\nexport function postMindmapUploadAttachment(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/upload-attachment',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//删除附件\r\nexport function postMindmapDeleteAttachments(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/delete-attachments',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//导入.xjmind文件\r\nexport function postMindmapImportXjmind(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/import-xjmind',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//ocr扫描生成导图\r\nexport function postMindmapOcrScan(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/ocr-scan',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//查询剩余ocr扫描次数\r\nexport function postMindmapOcrInfo(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/ocr-info',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//分享导图\r\nexport function postMindmapShare(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/share',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//修改分享状态\r\nexport function postMindmapModifyShare(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/modify-share',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//重新生成分享链接\r\nexport function postMindmapReshare(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/reshare',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//删除分享\r\nexport function postMindmapDeleteShare(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/delete-share',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//收藏分享链接\r\nexport function postMindmapCollectShare(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/collect-share',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//取消收藏分享链接\r\nexport function postMindmapUncollectShare(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/uncollect-share',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//保存分享链接到我的导图\r\nexport function postMindmapSaveShare(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/save-share',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//获取当前账号可录音最大时长\r\nexport function postMindmapAudioLimit(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/audio-limit',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//上传音频-需要登录\r\nexport function postMindmapUploadAudio(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/upload-audio',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//删除音频\r\nexport function postMindmapDeleteAudio(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/delete-audio',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//查看分享链接\r\nexport function postMindmapView(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/view',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//访问关联导图\r\nexport function postMindmapViewConnectmap(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/view-connectmap',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//新建分页\r\nexport function postMindmapNewSheet(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/new-sheet',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//删除分页\r\nexport function postMindmapDeleteSheet(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/delete-sheet',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//调整分页顺序\r\nexport function postMindmapMoveSheet(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/move-sheet',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//分页重命名\r\nexport function postMindmapModifySheet(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/modify-sheet',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//复制分页\r\nexport function postMindmapCopySheet(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/copy-sheet',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//拉取分页列表\r\nexport function postMindmapListSheets(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/list-sheets',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//搜索分页\r\nexport function postMindmapSearchSheet(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/search-sheet',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//迁移分页到另一张导图\r\nexport function postMindmapMigrateSheet(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/migrate-sheet',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//导出分页为一张新的导图\r\nexport function postMindmapExportSheet(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/export-sheet',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//拉取归档列表\r\nexport function postMindmapQueryArchives(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/query-archives',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//导入归档\r\nexport function postMindmapArchive(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/archive',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//取消归档\r\nexport function postMindmapUnarchive(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/unarchive',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//复制归档导图\r\nexport function postMindmapCopyArchive(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/copy-archive',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//删除归档\r\nexport function postMindmapDeleteArchive(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/delete-archive',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//移动归档\r\nexport function postMindmapMoveArchive(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/move-archive',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//修改归档\r\nexport function postMindmapModifyArchive(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/modify-archive',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//移动归档顺序\r\nexport function postMindmapRearrangeArchive(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/rearrange-archive',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//新建归档文件夹\r\nexport function postMindmapNewArchiveDir(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/new-archive-dir',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//搜索归档\r\nexport function postMindmapSearchArchive(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/search-archive',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//拉取备份列表\r\nexport function postMindmapListBackups(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/list-backups',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//查看备份内容\r\nexport function postMindmapViewBackup(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/view-backup',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//备份还原\r\nexport function postMindmapRestoreBackup(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/restore-backup',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//备份删除\r\nexport function postMindmapDeleteBackup(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/delete-backup',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//我的LaTex模版\r\nexport function postMindmapMyLatex(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/my-latex',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n//上传我的LaTex模板\r\nexport function postMindmapUploadMyLatex(req,onOk,onFail,eventually,headers,onProgress){\r\n    apiRequest('POST','/mindmap/upload-my-latex',req,onOk,onFail,eventually,headers,onProgress)\r\n}\r\n","class MindContentJsonData {\r\n    constructor() {\r\n        this.version = 1.0;\r\n        this.data = [];\r\n        this.files = [];\r\n        this.id = \"\";\r\n        this.mid = \"\";\r\n        this.lastsavetime = -1;\r\n    }\r\n}\r\nexport default MindContentJsonData","import { md5 } from \"../../../../common/netWork/base\";\r\nimport MindMe from \"../../../facade/MindMe\";\r\n\r\nclass MindContentData {\r\n    constructor() {\r\n        this.name = \"\";\r\n        this.fileName = \"\";\r\n        this.id = \"\";\r\n        this.mindType = 1;\r\n        this.content = null;\r\n        this.lastchangetime = -1;\r\n    }\r\n\r\n    setFileName(fileName, isMd5 = true) {\r\n        if (isMd5) {\r\n            this.fileName = md5(fileName) + \".json\";   \r\n        } else {\r\n            this.fileName = fileName;   \r\n        }\r\n    }\r\n\r\n    setName(name) {\r\n        this.name = name;\r\n    }\r\n\r\n    getContentJson() {        \r\n        let json = JSON.stringify(this, function (key, val) {\r\n            if (typeof val === \"function\") {\r\n                return val + '';\r\n            }\r\n            return val\r\n        });\r\n        return json;\r\n    }\r\n}\r\nexport default MindContentData","/**\r\n    sheet:{cover: \"r/mindyushu.oss-cn-shanghai.aliyuncs.com/mindmap/cover/e12e3f1435161df339be20f793ef1cb2.png\"\r\n    id: \"62d4d7c6103c41b62702d299\"\r\n    index: 0\r\n    name: \"分支主题 14\"\r\n    rootId: \"62d4d7c6103c41b62702d299\"} \r\n    */\r\nclass SheetData {\r\n    constructor() {\r\n        this.name = \"\";\r\n        this.cover = \"\";\r\n        this.id = \"\";\r\n        this.rootId = \"\";\r\n        this.index = 0;\r\n        this.lastchangetime = 0;\r\n        this.fileName = \"\";\r\n        this.type = 1;\r\n    }\r\n}\r\nexport default SheetData","import { postMindmapGetMindmap, postMindmapListSheets, postMindmapUploadMindmap } from \"../../common/netWork/mind_map_api\"\r\nimport LoadLocalXJMind from \"../core/tools/mapfile/LoadLocalXJMind\";\r\n\r\nclass MindmapDataRouter {\r\n    constructor() {\r\n        this.isElectron = true;\r\n    }\r\n\r\n    postGetMindmap(req, onOk, onFail, eventually, headers, onProgress) {\r\n        if (!LoadLocalXJMind.isCloudStorage() && req.path != null && req.path == this.getPath() && this.getLocalPath() != null && this.getLocalPath().length > 0) {\r\n            LoadLocalXJMind.loadMainContent(req.path, this.getLocalPath(), req.id, req.sheetId).then((data) => {\r\n                if (data != null) {\r\n                    let obj = {archiveId: \"\",\r\n                    audio: \"\",\r\n                    audioSeconds: 0,\r\n                    content: data.content,\r\n                    cover: \"\",\r\n                    createTime: 0,\r\n                    entityId: \"\",\r\n                    id: \"\",\r\n                    index: data.index,\r\n                    isArchived: false,\r\n                    isEmpty: false,\r\n                    lineLayout: data.lineLayout,\r\n                    machineId: \"\",\r\n                    mindDisplayType: data.mindDisplayType,\r\n                    modifyTime: \"\",\r\n                    name: data.name,\r\n                    nodeLayoutType: data.nodeLayoutType,\r\n                    parentId: \"\",\r\n                    sheetId: \"\",\r\n                    sheetNum: \"\",\r\n                    styleIndex: data.styleIndex,\r\n                    type: data.mindType,\r\n                    userId: \"\",}\r\n                    onOk(obj)\r\n                } else {\r\n                    onFail({desc:\"加载数据错误\"})\r\n                }\r\n            });\r\n        } else {\r\n            postMindmapGetMindmap(req, onOk, onFail, eventually, headers, onProgress)\r\n        }\r\n    }\r\n\r\n    postUploadMindmap(req, onOk, onFail, eventually, headers, onProgress) {\r\n        postMindmapUploadMindmap(req, onOk, onFail, eventually, headers, onProgress)\r\n    }\r\n\r\n    postMindmapSheets(req,onOk,onFail,eventually,headers,onProgress) {\r\n        if (!LoadLocalXJMind.isCloudStorage() && \r\n            this.getLocalPath() != null && this.getLocalPath().length > 0 && \r\n            (req.rootId == null || req.rootId == LoadLocalXJMind.getRootId())) {\r\n            LoadLocalXJMind.getMindmapSheets().then((data, error) => {\r\n                if (data != null) {\r\n                    onOk(data)\r\n                } else if (error != null) {\r\n                    onFail(error)\r\n                }\r\n            })\r\n        } else {\r\n            postMindmapListSheets(req,onOk,onFail,eventually,headers,onProgress)\r\n        }\r\n    }\r\n\r\n    setPath(path, local) {\r\n        LoadLocalXJMind.setPath(path, local)\r\n    }\r\n\r\n    setParameter(value) {\r\n        LoadLocalXJMind.setParameter(value)\r\n    }\r\n\r\n    getPath() {\r\n        return LoadLocalXJMind.getPath();\r\n    }\r\n\r\n    getLocalPath() {\r\n        return LoadLocalXJMind.getLocalPath();\r\n    }\r\n}\r\n\r\nexport default new MindmapDataRouter()","/*\r\n{totalNum: 4, pageSize: 20, sheets: Array(4)}\r\n*/\r\n\r\nclass MindSheets {\r\n    constructor() {\r\n        this.totalNum = 1;\r\n        this.pageSize = 20;\r\n        this.sheets = [];\r\n    }\r\n\r\n    toJSONString() {\r\n        let nodeStr = JSON.stringify(this, function (key, val) {\r\n            if (typeof val === \"function\") {\r\n                return val + '';\r\n            }\r\n            return val\r\n        });\r\n        return nodeStr;\r\n    }\r\n}\r\nexport default MindSheets","class FilePathAndName {\r\n    constructor() {\r\n        this.name = \"\";\r\n        this.path = \"\";\r\n    }\r\n}\r\nexport default FilePathAndName"],"sourceRoot":""}